service: Employee-Salary-Detail-All-API
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-south-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.employeeTable}
custom:
  employeeTable: salaryDetailInfoAll-${self:provider.stage}
plugins:
  - serverless-iam-roles-per-function
functions:
  salaryHandler:
    handler: api.salaryHandler
    name: employeeBank
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: employee/salary/create
          method: POST
      - http:
          path: employee/salary/update/{empId}
          method: PUT
      - http:
          path: employee/salary/get/{empId}
          method: GET
      - http:
          path: employee/salary/getAll
          method: GET
      - http:
          path: employee/salary/detete/{empId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
          - "dynamodb:DeleteItem"
        Resource: !GetAtt EmployeeTable.Arn
    # events:
    #   - http:
    #       method: POST
    #       path: createBankDetialsInfo
    #       cors: true
    #   - http:
    #       method: PUT
    #       path: updateBankDetialsInfo/{empId}
    #       cors: true
    #   - http:
    #       method: GET
    #       path: getEmployeeBankDetialsInfo/{empId}
    #       cors: true
    #   - http:
    #       method: GET
    #       path: getAllEmployeesBankDetialsInfo
    #       cors: true
    #   - http:
    #       method: DELETE
    #       path: deleteBankDetialsInfo/{empId}
    #       cors: true
    #   - http:
    #       method: DELETE
    #       path: softDeleteBankDetialsInfo/{empId}
    #       cors: true
    # iamRoleStatements:
    #   - Effect: "Allow"
    #     Action:
    #       - "dynamodb:PutItem"
    #       - "dynamodb:UpdateItem"
    #       - "dynamodb:DeleteItem"
    #       - "dynamodb:Scan"
    #       - "dynamodb:GetItem"
    #     Resource: !GetAtt EmployeeTable.Arn
    # iamRoleStatementsName: Employee-Banks-Detail-All-api-dev-lambda
resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTable}
        AttributeDefinitions:
          - AttributeName: empId
            AttributeType: S
        KeySchema:
          - AttributeName: empId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES